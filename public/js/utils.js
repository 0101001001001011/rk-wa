// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API
const API_BASE_URL = '/api';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function checkAuth() {
  const token = localStorage.getItem('token');
  const apiKey = localStorage.getItem('apiKey');

  if (!token && !apiKey) {
    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ç–æ–∫–µ–Ω–∞, –Ω–∏ API –∫–ª—é—á–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    window.location.href = '/login';
  }

  return { token, apiKey };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
async function fetchAPI(endpoint, options = {}) {
  const { token, apiKey } = checkAuth();

  const headers = {
    'Content-Type': 'application/json',
    ...options.headers
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  if (token) {
    headers['Authorization'] = `Bearer ${token}`;
  } else if (apiKey) {
    headers['x-api-key'] = apiKey;
  }

  try {
    console.log('Fetching API:', `${API_BASE_URL}${endpoint}`, 'Options:', options);

    const response = await fetch(`${API_BASE_URL}${endpoint}`, {
      ...options,
      headers
    });

    console.log('Response status:', response.status);

    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å 401, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    if (response.status === 401) {
      localStorage.removeItem('token');
      localStorage.removeItem('apiKey');
      localStorage.removeItem('user');
      window.location.href = '/login';
      return null;
    }

    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ—Å—Ç–æ –∫–∏–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
    if (!response.ok) {
      const errorData = await response.json();
      console.error('API Error:', errorData);
      throw new Error(errorData.error || 'API request failed');
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    return await response.json();
  } catch (error) {
    console.error('API Request Error:', error);
    showAlert(error.message || 'Error communicating with the server', 'danger');
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showAlert(message, type = 'info') {
  // –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  let alertContainer = document.getElementById('alert-container');

  if (!alertContainer) {
    alertContainer = document.createElement('div');
    alertContainer.id = 'alert-container';
    alertContainer.style.position = 'fixed';
    alertContainer.style.top = '20px';
    alertContainer.style.right = '20px';
    alertContainer.style.zIndex = '1000';
    document.body.appendChild(alertContainer);
  }

  // –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const alert = document.createElement('div');
  alert.className = `alert alert-${type}`;
  alert.style.marginBottom = '10px';
  alert.textContent = message;

  // –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
  const closeBtn = document.createElement('span');
  closeBtn.innerHTML = '&times;';
  closeBtn.style.marginLeft = '10px';
  closeBtn.style.float = 'right';
  closeBtn.style.fontWeight = 'bold';
  closeBtn.style.cursor = 'pointer';
  closeBtn.onclick = () => alertContainer.removeChild(alert);
  alert.appendChild(closeBtn);

  // –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  alertContainer.appendChild(alert);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    if (alertContainer.contains(alert)) {
      alertContainer.removeChild(alert);
    }
  }, 5000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(dateString) {
  const date = new Date(dateString);
  return new Intl.DateTimeFormat('ru-RU', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  }).format(date);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞
function logout() {
  localStorage.removeItem('token');
  localStorage.removeItem('apiKey');
  localStorage.removeItem('user');
  window.location.href = '/login';
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
function initNavbar() {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  const userInfoElement = document.getElementById('user-info');

  if (userInfoElement && user.email) {
    userInfoElement.textContent = user.email;
  }

  const logoutBtn = document.getElementById('logout-btn');
  if (logoutBtn) {
    logoutBtn.addEventListener('click', (e) => {
      e.preventDefault();
      logout();
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
function getUrlParam(param) {
  const urlParams = new URLSearchParams(window.location.search);
  return urlParams.get(param);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∏–∑ –ø—É—Ç–∏ URL (–¥–ª—è routes —Å :id)
function getIdFromPath() {
  const path = window.location.pathname;
  const parts = path.split('/');
  return parts[parts.length - 1];
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Å—Ç–∞–Ω—Å–∞ –≤ UI
function getStatusBadgeHTML(status) {
  const statusMap = {
    'connected': { class: 'status-connected', text: 'Connected' },
    'disconnected': { class: 'status-disconnected', text: 'Disconnected' },
    'connecting': { class: 'status-connecting', text: 'Connecting' },
    'qr_received': { class: 'status-qr-received', text: 'QR Code' },
    'logged_out': { class: 'status-disconnected', text: 'Logged Out' },
    'error': { class: 'status-disconnected', text: 'Error' }
  };

  const statusInfo = statusMap[status] || { class: '', text: status };

  return `<span class="status-badge ${statusInfo.class}">${statusInfo.text}</span>`;
}

function generateQRCodeImage(data, size = 200) {
  return `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${encodeURIComponent(data)}`;
}

function getInstanceStatusInfo(status) {
  const statusMap = {
    'connected': {
      class: 'status-connected',
      text: '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ',
      description: '–ò–Ω—Å—Ç–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ WhatsApp –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.'
    },
    'disconnected': {
      class: 'status-disconnected',
      text: '–û—Ç–∫–ª—é—á–µ–Ω–æ',
      description: '–ò–Ω—Å—Ç–∞–Ω—Å –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç WhatsApp. –ù–∞–∂–º–∏—Ç–µ "–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å" –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.'
    },
    'connecting': {
      class: 'status-connecting',
      text: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
      description: '–ò–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WhatsApp. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.'
    },
    'qr_received': {
      class: 'status-qr-received',
      text: 'QR –ö–æ–¥',
      description: '–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —Å –ø–æ–º–æ—â—å—é WhatsApp –Ω–∞ –≤–∞—à–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.'
    },
    'logged_out': {
      class: 'status-disconnected',
      text: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω',
      description: '–í—ã–ø–æ–ª–Ω–µ–Ω –≤—ã—Ö–æ–¥ –∏–∑ WhatsApp. –ù–∞–∂–º–∏—Ç–µ "–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å" –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.'
    },
    'error': {
      class: 'status-disconnected',
      text: '–û—à–∏–±–∫–∞',
      description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ WhatsApp. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∂—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.'
    }
  };

  return statusMap[status] || {
    class: '',
    text: status,
    description: '–°—Ç–∞—Ç—É—Å –∏–Ω—Å—Ç–∞–Ω—Å–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω.'
  };
}

function formatPhoneNumber(number) {
  if (!number) return '';

  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ @s.whatsapp.net
  let cleaned = number.toString().replace(/\D/g, '').replace('@s.whatsapp.net', '').replace('@c.us', '');

  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
  if (cleaned.length < 10) return cleaned;

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
  if (cleaned.startsWith('7') && cleaned.length === 11) {
    return `+${cleaned.substring(0, 1)} (${cleaned.substring(1, 4)}) ${cleaned.substring(4, 7)}-${cleaned.substring(7, 9)}-${cleaned.substring(9, 11)}`;
  }

  // –û–±—â–µ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  let result = '+';

  if (cleaned.length > 10) {
    result += cleaned.substring(0, cleaned.length - 10) + ' ';
    cleaned = cleaned.substring(cleaned.length - 10);
  }

  if (cleaned.length === 10) {
    result += `(${cleaned.substring(0, 3)}) ${cleaned.substring(3, 6)}-${cleaned.substring(6, 10)}`;
  } else {
    result += cleaned;
  }

  return result;
}

function getMessageTypeIcon(type) {
  switch (type) {
    case 'text': return 'üìù';
    case 'image': return 'üñºÔ∏è';
    case 'video': return 'üé¨';
    case 'audio': return 'üîä';
    case 'document': return 'üìÑ';
    case 'location': return 'üìç';
    case 'contact': return 'üë§';
    default: return 'üìã';
  }
}

function getMessageStatusHtml(status) {
  const statusMap = {
    'sent': { class: 'status-connecting', text: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' },
    'delivered': { class: 'status-connecting', text: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' },
    'read': { class: 'status-connected', text: '–ü—Ä–æ—á–∏—Ç–∞–Ω–æ' },
    'failed': { class: 'status-disconnected', text: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏' }
  };

  const statusInfo = statusMap[status] || { class: '', text: status };

  return `<span class="status-badge ${statusInfo.class}">${statusInfo.text}</span>`;
}

async function updateInstanceStatus(instanceId, statusElement) {
  try {
    const statusData = await fetchAPI(`/whatsapp/${instanceId}/status`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    statusElement.innerHTML = getStatusBadgeHTML(statusData.status);

    return statusData.status;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    return null;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  initNavbar();
});